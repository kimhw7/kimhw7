  tsc로 ts 파일을 js로 컴파일할 수 있음
  타입 지정 후 해당 타입과 맞지 않는 경우 ts에서 에러를 보여줌
    -> 단, 컴파일을 막지는 않는다. js파일로 컴파일은 되지만 ide에서 에러를 보여주는 것

  js는 동적 타입. 변수에 다른 타입을 재할당 할 수 있음. -> js도 if 조건문으로 타입검사를 통해 에러를 발생시킬 수 있지만 이는 불필요한 에러임
  js는 런타임에서 에러를 확인할 수 있는 것임.
  ts는 정적 타입으로 런타임이 아닌 개발단계에서 에러를 알려줌

## core types
  - number
  - string
  - boolean
  - object
      예시) person: {
             name: string;
             age: number;
           }
      key: type 형식으로 객체의 구체적인 타입이 추론됨.
  - array
      예시) hobbies: ["Sports", "Cooking"]
        => string[]
      여러 타입이 혼합된 배열을 사용하고자 한다면 any[](자주 사용 시 ts의 이점을 잃게 됨)
  - Tuple
      예시) [number, string]
      여러 타입이 섞인 배열에서 요소의 개수와 타입을 명시적으로 지정해줌(배열의 구조를 미리 지정)
      단 push 메서드는 예외적으로 허용됨.
  - Enum
      예시) 
      enum Role { ADMIN, READ_ONLY, AUTHOR }
      const person = {
        role: Role.ADMIN
      }
      따로 지정하지 않으면 각 값은 0, 1, 2로 지정됨. 
      첫번째 값을 지정하면 뒷 값도 그에맞춰 순서대로 변경됨.
      각 값을 다르게 지정할 수도 있음
  - any 
      어떤 타입이든 지정 가능함.
      ts의 장점을 상쇄시켜 js를 사용하는 것과 동일함.
      ts 컴파일러가 체크할게 없어짐
  - Union
      예시) input1: number | string | boolean
            if(typeof input1 === 'number') {}
      Union 타입은 런타임 체크가 필요한 경우가 있음.
  - Literal
      예시) resultConversion: "as-number" | "as-text"
      특정 값만 허용함
  - Alias
      예시) type Combinable = number | string;
        input1: Combinable
      동일한 유형의 타입을 지정해 줄 수 있어 코드양을 줄일 수 있음
  - Void
      예시) function printNum(num: number) {
             console.log(num)
           }
      위 함수와 같이 리턴 값이 없는 함수는 리턴 타입으로 void를 갖는다.
  - Unknown
      어떤값이 들어올지 모르는 경우
      타입 확인을 아예하지 않는 any와는 다르게 unknown은 타입 확인을 함.
        let userInput: unknown;
        userInput = 5;
        userInput = "hi"
      위와 같은 코드에서 userInput은 string타입이 아님. 어떤 타입일진 정확히는 모르지만 타입 검사가 실행되므로 any보다 더 나은 선택지임
      단, 가능하다면 unknown 보다는 다른 타입을 사용하는것이 좋음(union 등)
  - Never
      




## 타입 할당과 타입 추론
  - 타입추론이란?
    상수나 변수 선언 시 초기값을 지정하게 되면 ts가 해당 타입을 추론할 수 있음.
    이 경우 불필요한 타입 지정을 하지 않아도됨.

## 

